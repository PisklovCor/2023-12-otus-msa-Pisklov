{
	"info": {
		"_postman_id": "35a4f87c-6517-45a7-aa52-079835938bce",
		"name": "project_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34799908"
	},
	"item": [
		{
			"name": "Просмотр текущих сессий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema matches the expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/account/sessions",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление всех сессий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema matches the expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/account/sessions",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Регистация пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('login');\r",
							"    pm.expect(responseData).to.have.property('password');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('firstName');\r",
							"    pm.expect(responseData).to.have.property('lastName');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Login and password are in valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.login).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Login should not be empty\");\r",
							"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"pm.environment.set(\"currentUser\", responseData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test_login\",\r\n    \"password\": \"test_password\",\r\n    \"email\": \"test@mail.ru\",\r\n    \"firstName\": \"test_firstName\",\r\n    \"lastName\": \"test_lastName\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/account/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Вход пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test_login\",\r\n    \"password\": \"test_password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Авторизация пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех книг",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, title, author, and rating\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(book) {",
							"        pm.expect(book).to.have.property('id');",
							"        pm.expect(book).to.have.property('title');",
							"        pm.expect(book).to.have.property('author');",
							"        pm.expect(book).to.have.property('rating');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(book) {",
							"        pm.expect(book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Author is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(book) {",
							"        pm.expect(book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Rating is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(book) {",
							"    pm.expect(book.rating).to.be.a('number').and.to.satisfy((rating) => rating >= 0, \"Rating should be a non-negative integer\");",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "test_login",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/account/admin/all-user",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"admin",
						"all-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Взять книгу",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, accountId, and book\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('accountId');\r",
							"    pm.expect(responseData).to.have.property('book');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title and author are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"    pm.expect(responseData.book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Rating is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.book.rating).to.be.a('number');\r",
							"    pm.expect(responseData.book.rating).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyTakeBook}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book/take/1",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"take",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список книг пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response - accountId and books\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.accountId).to.exist.and.to.be.a('number');\r",
							"    \r",
							"    pm.expect(responseData.book).to.be.an('array');\r",
							"    responseData.book.forEach(function (book) {\r",
							"        pm.expect(book).to.be.an('object');\r",
							"        pm.expect(book.id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(book.title).to.exist.and.to.be.a('string');\r",
							"        pm.expect(book.author).to.exist.and.to.be.a('string');\r",
							"        pm.expect(book.rating).to.exist.and.to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"AccountId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.accountId).to.be.a('number').and.to.satisfy((accountId) => accountId >= 0, \"AccountId should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book/find-by-account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"find-by-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Уведомления #1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"",
							"pm.test(\"Response schema for accountId, email, message, title, and author fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(notification => {",
							"    pm.expect(notification).to.have.property('accountId').that.is.a('number');",
							"    pm.expect(notification).to.have.property('email').that.is.a('string');",
							"    pm.expect(notification).to.have.property('message').that.is.a('string');",
							"    pm.expect(notification).to.have.property('title').that.is.a('string');",
							"    pm.expect(notification).to.have.property('author').that.is.a('string');",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/notification/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notification",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить книгу",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, title, author, and rating\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('title');\r",
							"    pm.expect(responseData).to.have.property('author');\r",
							"    pm.expect(responseData).to.have.property('rating');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title must be a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyAddBook}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Robinson Crusoe\",\r\n    \"author\": \"Daniel Defoe\",\r\n    \"rating\": 8\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/book/creat",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"creat"
					]
				}
			},
			"response": []
		},
		{
			"name": "Уведомления #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate schema for accountId, email, message, title, and author properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('accountId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('email').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('message').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('title').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('author').that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/notification/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notification",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех книг #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema for each book object in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.be.an('object');\r",
							"        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
							"        pm.expect(book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should be a non-empty string\");\r",
							"        pm.expect(book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should be a non-empty string\");\r",
							"        pm.expect(book.rating).to.be.a('number').and.to.be.at.least(0, \"Rating should be a non-negative number\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Взять еще книгу",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id, accountId, and book properties exist in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('accountId');\r",
							"    pm.expect(responseData).to.have.property('book');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyTakeBookNew}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book/take/4",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"take",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех книг пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - accountId, book\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('accountId');\r",
							"    pm.expect(responseData).to.have.property('book');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate book attributes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    responseData.book.forEach(function(book) {\r",
							"        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"        pm.expect(book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should be a non-empty string\");\r",
							"        pm.expect(book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should be a non-empty string\");\r",
							"        pm.expect(book.rating).to.be.a('number').and.to.be.at.least(0, \"Rating should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book/find-by-account",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"find-by-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Уведомления #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - accountId, email, message, title, and author\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('accountId');\r",
							"        pm.expect(item).to.have.property('email');\r",
							"        pm.expect(item).to.have.property('message');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('author');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Author is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/notification/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notification",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить книгу в ожидания",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header should exist\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message should exist\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"Запрос на вашу книгу будет обработан\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is text/plain\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is in the expected format\", function () {\r",
							"    const responseBody = pm.response.text();\r",
							"    \r",
							"    pm.expect(responseBody).to.include(\"Запрос на вашу книгу будет обработан\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyLeaveRequestForABook}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"The Green Mile\",\r\n    \"author\": \"Stephen Edwin King\",\r\n    \"rating\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/book/leave-request",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"leave-request"
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверить заявку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - accountId, email, title, author, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(order){\r",
							"        pm.expect(order).to.have.property('accountId');\r",
							"        pm.expect(order).to.have.property('email');\r",
							"        pm.expect(order).to.have.property('title');\r",
							"        pm.expect(order).to.have.property('author');\r",
							"        pm.expect(order).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/order/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"order",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Уведомления #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.include.all.keys('accountId', 'email', 'message', 'title', 'author');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item){\r",
							"        pm.expect(item.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/notification/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notification",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Выполнить заявку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"  pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('accountId');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('title');\r",
							"    pm.expect(responseData).to.have.property('author');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.email).to.be.a('string');\r",
							"  pm.expect(responseData.email).to.match(/^.+@.+\\..+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/order/2?status=added",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"order",
						"2"
					],
					"query": [
						{
							"key": "status",
							"value": "added"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Статус заявки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order).to.have.property('accountId');\r",
							"        pm.expect(order).to.have.property('email');\r",
							"        pm.expect(order).to.have.property('title');\r",
							"        pm.expect(order).to.have.property('author');\r",
							"        pm.expect(order).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/order/2",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"order",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Уведомления #5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - accountId, email, message, title, and author\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('accountId');\r",
							"        pm.expect(item).to.have.property('email');\r",
							"        pm.expect(item).to.have.property('message');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('author');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/notification/{{currentUser}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notification",
						"{{currentUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех книг #3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, title, author, and rating\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.be.an('object');\r",
							"        pm.expect(book).to.include.all.keys('id', 'title', 'author', 'rating');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Author is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(book) {\r",
							"    pm.expect(book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Account-Id",
						"value": "2",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "dc423238-98db-4222-8889-08be652d6d1f",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Выход пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test_login\",\r\n    \"password\": \"test_password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/account/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Авторизация после выхода",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the correct Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Вход",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Авторизация",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is in an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/auth",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Удалить книгу",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book/admin/2",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book",
						"admin",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех книг #4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields - id, title, author, and rating\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.have.property('id');\r",
							"        pm.expect(book).to.have.property('title');\r",
							"        pm.expect(book).to.have.property('author');\r",
							"        pm.expect(book).to.have.property('rating');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(book) {\r",
							"    pm.expect(book.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Author is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should be a non-empty string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Rating is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.rating).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{idempotencyKeyBase}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/book",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Удалить заявку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response body schema is as expected\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-User",
						"value": "admin",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/order/admin/1",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"order",
						"admin",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Список всех заявок",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Account-Id",
						"value": "2",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "dc423238-98db-4222-8889-08be652d6d1f",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Список всех пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema for the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(user).to.have.property('login').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('password').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('email').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('firstName').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('lastName').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "admin",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/account/admin/all-user",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"admin",
						"all-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Удалить пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Schema validation for the response body is performed\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-User",
						"value": "admin",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test_login\",\r\n    \"password\": \"test_password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/account/admin",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Список всех пользователей #2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for id, login, password, email, firstName, and lastName fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(user).to.have.property('login').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('password').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('email').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('firstName').that.is.a('string');\r",
							"        pm.expect(user).to.have.property('lastName').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 4000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-User",
						"value": "admin",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/api/account/admin/all-user",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"admin",
						"all-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Вход удаленного пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 503\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(503);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"test_login\",\r\n    \"password\": \"test_password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Выход пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status field is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/account/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"account",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}